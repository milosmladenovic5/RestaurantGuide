{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/sqlite/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Cordova, CordovaInstance, Plugin, CordovaCheck, InstanceProperty, IonicNativePlugin } from '@ionic-native/core';\r\n\r\n\r\ndeclare var sqlitePlugin;\r\n\r\nexport interface SQLiteDatabaseConfig {\r\n  /**\r\n   * Name of the database. Example: 'my.db'\r\n   */\r\n  name: string;\r\n  /**\r\n   * Location of the database. Example: 'default'\r\n   */\r\n  location?: string;\r\n  /**\r\n   * iOS Database Location. Example: 'Library'\r\n   */\r\n  iosDatabaseLocation?: string;\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class SQLiteObject {\r\n\r\n  constructor(public _objectInstance: any) { }\r\n\r\n  @InstanceProperty databaseFeatures: any;\r\n\r\n  @CordovaInstance({\r\n    sync: true\r\n  })\r\n  addTransaction(transaction: any): void { }\r\n\r\n  /**\r\n   * @param fn {any}\r\n   * @returns {Promise<any>}\r\n   */\r\n  @CordovaInstance({\r\n    successIndex: 2,\r\n    errorIndex: 1\r\n  })\r\n  transaction(fn: any): Promise<any> { return; }\r\n\r\n  /**\r\n   * @param fn {any}\r\n   * @returns {Promise<any>}\r\n   */\r\n  @CordovaInstance()\r\n  readTransaction(fn: any): Promise<any> { return; }\r\n\r\n  @CordovaInstance({\r\n    sync: true\r\n  })\r\n  startNextTransaction(): void { }\r\n\r\n  /**\r\n   * @returns {Promise<any>}\r\n   */\r\n  @CordovaInstance()\r\n  close(): Promise<any> { return; }\r\n\r\n  @CordovaInstance({\r\n    sync: true\r\n  })\r\n  start(): void { }\r\n\r\n  /**\r\n   * Execute SQL on the opened database. Note, you must call `create` first, and\r\n   * ensure it resolved and successfully opened the database.\r\n   */\r\n  @CordovaInstance()\r\n  executeSql(statement: string, params: any): Promise<any> { return; }\r\n\r\n  /**\r\n   * @param sql\r\n   * @param values\r\n   * @returns {Promise<any>}\r\n   */\r\n  @CordovaInstance()\r\n  addStatement(sql, values): Promise<any> { return; }\r\n\r\n  /**\r\n   * @param sqlStatements {any}\r\n   * @returns {Promise<any>}\r\n   */\r\n  @CordovaInstance()\r\n  sqlBatch(sqlStatements: any): Promise<any> { return; }\r\n\r\n  @CordovaInstance({\r\n    sync: true\r\n  })\r\n  abortallPendingTransactions(): void { }\r\n\r\n  /**\r\n   @param handler\r\n   @param response\r\n   */\r\n  @CordovaInstance({\r\n    sync: true\r\n  })\r\n  handleStatementSuccess(handler, response): void { }\r\n\r\n  /**\r\n   * @param handler\r\n   * @param response\r\n   */\r\n  @CordovaInstance({\r\n    sync: true\r\n  })\r\n  handleStatementFailure(handler, response): void { }\r\n\r\n\r\n  @CordovaInstance({\r\n    sync: true\r\n  })\r\n  run(): void { }\r\n\r\n  /**\r\n   * @param txFailure\r\n   */\r\n  @CordovaInstance({\r\n    sync: true\r\n  })\r\n  abort(txFailure): void { }\r\n\r\n\r\n  @CordovaInstance({\r\n    sync: true\r\n  })\r\n  finish(): void { }\r\n\r\n  /**\r\n   * @param sqlerror\r\n   */\r\n  @CordovaInstance({\r\n    sync: true\r\n  })\r\n  abortFromQ(sqlerror): void { }\r\n\r\n}\r\n\r\n/**\r\n * @name SQLite\r\n *\r\n * @description\r\n * Access SQLite databases on the device.\r\n *\r\n * @usage\r\n *\r\n * ```typescript\r\n * import { SQLite, SQLiteObject } from '@ionic-native/sqlite';\r\n *\r\n * constructor(private sqlite: SQLite) { }\r\n *\r\n * ...\r\n *\r\n * this.sqlite.create({\r\n *   name: 'data.db',\r\n *   location: 'default'\r\n * })\r\n *   .then((db: SQLiteObject) => {\r\n *\r\n *\r\n *     db.executeSql('create table danceMoves(name VARCHAR(32))', {})\r\n *       .then(() => console.log('Executed SQL'))\r\n *       .catch(e => console.log(e));\r\n *\r\n *\r\n *   })\r\n *   .catch(e => console.log(e));\r\n *\r\n * ```\r\n *\r\n * @classes\r\n * SQLiteObject\r\n * @interfaces\r\n * SQLiteDatabaseConfig\r\n */\r\n@Plugin({\r\n  pluginName: 'SQLite',\r\n  pluginRef: 'sqlitePlugin',\r\n  plugin: 'cordova-sqlite-storage',\r\n  repo: 'https://github.com/litehelpers/Cordova-sqlite-storage'\r\n})\r\n\r\nexport class SQLite extends IonicNativePlugin {\r\n\r\n  /**\r\n   * Open or create a SQLite database file.\r\n   *\r\n   * See the plugin docs for an explanation of all options: https://github.com/litehelpers/Cordova-sqlite-storage#opening-a-database\r\n   *\r\n   * @param config {SQLiteDatabaseConfig} database configuration\r\n   * @return Promise<SQLiteObject>\r\n   */\r\n  @CordovaCheck()\r\n  create(config: SQLiteDatabaseConfig): Promise<SQLiteObject> {\r\n    return new Promise((resolve, reject) => {\r\n        sqlitePlugin.openDatabase(config, db => resolve(new SQLiteObject(db)), reject);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Verify that both the Javascript and native part of this plugin are installed in your application\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  echoTest(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Deletes a database\r\n   * @param config {SQLiteDatabaseConfig} database configuration\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  deleteDatabase(config: SQLiteDatabaseConfig): Promise<any> { return; }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}